package com.google.code.gaeom;

/**
 * The Find command interface. Instances of Find are generated by a call to {@link ObjectStoreSession#find(Class)}. You
 * can configure the behavior of this query using the methods below before invoking {@link #now()} to invoke the query.
 * 
 * NOTE: there is no asynchronous version of this command at this time due to the fact that Google has not released a
 * supported asynchronous query interface.
 * 
 * @author Peter Murray <gaeom@pmurray.com>
 */
public interface Find<T> extends Terminator<Iterable<T>>, Load<Find<T>>
{
	/**
	 * Sort orders for sort configuration of {@link Find#sort(String, Sort)}.
	 * 
	 * @author Peter Murray <gaeom@pmurray.com>
	 */
	static enum Sort
	{
		Ascending, Descending
	}

	/**
	 * Specifies an ascending sort on {@code field}
	 * 
	 * @param field
	 *            the field to sort on
	 * @return the Find command instance
	 */
	public Find<T> sort(String field);

	/**
	 * Specifies a sort order on {@code field}
	 * 
	 * @param field
	 *            the field to sort on
	 * @param direction
	 *            the direction to sort in
	 * @return the Find command instance
	 */
	public Find<T> sort(String field, Sort direction);

	/**
	 * Comparison operators for configuration of {@link Find#filter(String, Op, Object)}
	 * 
	 * @author Peter Murray <gaeom@pmurray.com>
	 */
	static enum Op
	{
		LessThan, LessThanOrEqualTo, EqualTo, GreaterThanOrEqualTo, GreaterThan, NotEqualTo
	}

	/**
	 * Specifies an additional equality filter for the query based on {@code field} and {@code value}. The {@code value}
	 * will undergo encoding in accordance with the @{code field}'s annotation and type.
	 * 
	 * @param field
	 *            the object's field to compare against
	 * @param value
	 *            the value to filter for.
	 * @return the Find command instance
	 */
	public Find<T> filter(String field, Object value);

	/**
	 * Specifies an in filter for the query based on {@code field} and {@code values}. The {@code values} will undergo
	 * encoding in accordance with the @{code field}'s annotations and type.
	 * 
	 * @param field
	 *            the object's field to compare against
	 * @param values
	 *            the values to filter for
	 * @return the Find command interface
	 */
	public Find<T> filterIn(String field, Iterable<?> values);

	/**
	 * Specifies an additional filter for the query based on {@code field} and {@code value}. The @{code value} will
	 * undergo encoding in accordance with the @{code field}'s annotation and type.
	 * 
	 * @param field
	 *            the object's field to compare against
	 * @param op
	 *            the comparison operation
	 * @param value
	 *            the value to filter for.
	 * @return the Find command instance
	 */
	public Find<T> filter(String field, Op op, Object value);

	/**
	 * Specifies an additional between filter for the query based on {@code field} and {@code lower} and {@code upper}.
	 * The {@code lower} and {@code upper} values will undergo encoding in accordance with {@code field}'s annotation
	 * and type. This filter defaults to being inclusive of the {@code lower} value and exclusive of the {@code upper}.
	 * 
	 * @param field
	 *            the object's field to compare with
	 * @param lower
	 *            the bottom bound
	 * @param upper
	 *            the upper bound
	 * @return the Find command instance
	 */
	public Find<T> filterBetween(String field, Object lower, Object upper);

	/**
	 * Specifies an additional between filter for the query based on {@code field} and {@code lower} and {@code upper}.
	 * The {@code lower} and {@code upper} values will undergo encoding in accordance with {@code field}'s annotation
	 * and type. This filter includes the {@code upper} and {@code lower} values in the search based on the
	 * {@code includeBottom} and {@code includeTop} parameters.
	 * 
	 * @param field
	 *            the object's field to compare with
	 * @param lower
	 *            the bottom bound
	 * @param upper
	 *            the upper bound
	 * @param includeBottom
	 *            true to include the {@code lower} value in the results
	 * @param includeTop
	 *            true to include the {@code upper} value in the results
	 * @return the Find command instance
	 */
	public Find<T> filterBetween(String field, Object lower, Object upper, boolean includeBottom, boolean includeTop);

	/**
	 * Specifies a string prefix filter for the query based on {@code field} and {@code prefix}.
	 * 
	 * @param field
	 *            the object's field to compare with
	 * @param prefix
	 *            the prefix to search for (case sensitive)
	 * @return the Find command instance
	 */
	public Find<T> filterBeginsWith(String field, String prefix);

	/**
	 * Specifies an additional ancestor filter on the query. Objects returned will have keys that descend from the key
	 * of the {@code ancestor} object.
	 * 
	 * @param ancestor
	 *            the ancestor to filter by.
	 * @return the Find command instance
	 */
	public Find<T> ancestor(Object ancestor);

	/**
	 * Specifies the offset into the result set that the results should begin with.
	 * 
	 * @param offset
	 *            the offset to start at
	 * @return the Find command instance
	 */
	public Find<T> start(int offset);

	/**
	 * Specifies the maximum number of instances to return from this query.
	 * 
	 * @param count
	 *            the maximum number to return
	 * @return the Find command instance
	 */
	public Find<T> limit(int count);

	/**
	 * Sets up the command to fetch only the first matching result.
	 * 
	 * @return a Find sub command that terminates in a single instance.
	 */
	public Terminator<T> single();

	/**
	 * Sets up the command to fetch only the count of matching objects.
	 * 
	 * @return a Find sub command that will return the count.
	 */
	public Terminator<Integer> count();
}
